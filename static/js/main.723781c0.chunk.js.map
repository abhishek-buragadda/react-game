{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["possibleCombinationSum","arr","n","indexOf","length","pop","listSize","combinationsCount","i","combinationSum","j","Numbers","props","getClassName","number","usedNumbers","selectedNumbers","react_default","a","createElement","className","list","map","onClick","clickHandler","key","Buttons","button","isCorrectAnswer","updateUsedNumbers","disabled","checkAnswer","redraw","redrawCount","Stars","stars","starsCount","push","Answer","handleUnselect","Done","doneStatus","resetHandler","Game","state","initialState","isSumPossible","_ref","randomNoOfStars","possibleNumbers","filter","_this","setState","updateDoneStatus","prevState","redraws","randomNum","handleClick","concat","reduce","prev","curr","unSelect","unselectedNumber","_this$state","this","App_Stars","App_Buttons","App_Answer","App_Done","App_Numbers","Component","Math","floor","random","App","App_Game","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.723781c0.chunk.js","sourcesContent":["import  React, {Component}  from 'react';\nimport './index.css';\n\n\nvar possibleCombinationSum = function(arr, n) {\n  if (arr.indexOf(n) >= 0) { return true; }\n  if (arr[0] > n) { return false; }\n  if (arr[arr.length - 1] > n) {\n    arr.pop();\n    return possibleCombinationSum(arr, n);\n  }\n  var listSize = arr.length, combinationsCount = (1 << listSize)\n  for (var i = 1; i < combinationsCount ; i++ ) {\n    var combinationSum = 0;\n    for (var j=0 ; j < listSize ; j++) {\n      if (i & (1 << j)) { combinationSum += arr[j]; }\n    }\n    if (n === combinationSum) { return true; }\n  }\n  return false;\n};\n\nconst Numbers = (props) => {\n\n  const getClassName = (number)=> {\n\n      if(props.usedNumbers.indexOf(number) >=0 ){\n        return 'selected';\n      }\n      if(props.selectedNumbers.indexOf(number)>=0){\n        return 'disabled';\n      }\n  }\n    return (\n        <div className= \"card text-center\">\n            <div className=\"numbers\">\n              {Numbers.list.map((number,i) =>\n                  <span  onClick={() => props.clickHandler(number)} className={getClassName(number)} key={i}> {number} </span>\n              )}\n            </div>\n\n        </div>\n\n    )\n\n}\nNumbers.list = [1,2,3,4,5,6,7,8,9,10];\n const Buttons = (props) =>{\n   let button ;\n   switch (props.isCorrectAnswer){\n      case true:\n        button =  <button className=\"btn btn-success\"\n         onClick = {props.updateUsedNumbers}> <i className=\"fa fa-check\" /></button>\n         break;\n       case false :\n          button =  <button className=\"btn btn-danger\"\n          > <i className=\"fa fa-times\"/> </button>\n        break;\n        default :\n          button =  <button className=\"btn btn-primary\" disabled = {props.selectedNumbers.length === 0 }\n           onClick = {props.checkAnswer}> = </button>\n\n   }\n  return (\n      <div className= \"col-md-2\">\n        {button}\n        <br/><br/>\n        <button className =\"btn btn-warning \" onClick={props.redraw} disabled ={props.redrawCount === 0 }>\n        <i className=\"fa fa-refresh\"/>{props.redrawCount} </button>\n      </div>\n\n  )\n\n}\n\nconst Stars = (props) => {\n\n     let stars = [];\n     for (let i=0; i < props.starsCount; i++){\n        stars.push(<i key = {i} className=\"fa fa-star\"/>);\n     }\n    return (\n        <div className= \"stars col-md-5\">\n            {stars}\n        </div>\n    )\n}\n\nconst Answer = (props) => {\n    return (\n        <div className=\"numbers col-md-5\">\n          {props.selectedNumbers.map( (number,i) =>\n              <span key={i} onClick = {() => props.handleUnselect(number)}>{number}\n              </span>\n          )}\n        </div>\n    )\n\n}\n\nconst Done = (props) => {\n    return (\n        <div className=\"text-center\">\n          <h1>{props.doneStatus}</h1>\n            <button onClick={props.resetHandler}>Reset Game</button>\n          </div>\n    )\n}\nclass Game extends Component{\n  static randomNum = () => 1 + Math.floor(Math.random()* 9);\n  static initialState = () => ({\n    selectedNumbers : [],\n    randomNoOfStars : Game.randomNum(),\n    isCorrectAnswer : null,\n    usedNumbers : [],\n    redraws :5,\n    doneStatus : null\n  });\n  state = Game.initialState();\n   isSumPossible = ({randomNoOfStars , usedNumbers}) => {\n      const possibleNumbers = Game.list.filter(number => usedNumbers.indexOf(number) === -1 );\n      return possibleCombinationSum( possibleNumbers, randomNoOfStars);\n\n  }\n\n  resetHandler = () => this.setState( Game.initialState() );\n\n  updateDoneStatus = () => {\n      this.setState(  prevState => {\n          if( this.state.usedNumbers.length === 10 ){\n              return { doneStatus : 'You Won!'} ;\n          }\n          else if ( this.state.redraws ===0 && !this.isSumPossible(prevState) ){\n              return {doneStatus : 'Game Over'}\n          }\n      } );\n\n  }\n  redraw = () => {\n    if(this.state.redraws === 0 ) return ;\n    this.setState( (prevState )=> ({\n        randomNoOfStars :  Game.randomNum(),\n        isCorrectAnswer :null,\n        selectedNumbers : [],\n        redraws : prevState.redraws - 1\n\n    }), this.updateDoneStatus );\n  }\n  handleClick = (number) => {\n        this.setState( (prevState) => {\n              let newState = [];\n              if(this.state.selectedNumbers.indexOf(number) < 0)\n                    newState = prevState.selectedNumbers.concat(number);\n              else\n                    newState = prevState.selectedNumbers;\n              return {\n                  selectedNumbers : newState,\n                  isCorrectAnswer: null\n              }\n        });\n  }\n\n  checkAnswer = () => {\n      this.setState( (prevState) => ({\n          isCorrectAnswer : prevState.randomNoOfStars ===\n                  prevState.selectedNumbers.reduce( (prev,curr) =>  prev+ curr , 0 )\n      }))\n\n  }\n\n\n  unSelect = (unselectedNumber) => {\n      this.setState( (prevState) => ({\n          selectedNumbers : prevState.selectedNumbers.filter( (number)=> number !== unselectedNumber),\n          isCorrectAnswer: null\n      }))\n  }\n\n  updateUsedNumbers = () => {\n      this.setState ( (prevState) => ({\n          usedNumbers : prevState.usedNumbers.concat(prevState.selectedNumbers),\n          selectedNumbers : [],\n          isCorrectAnswer : null,\n          randomNoOfStars : Game.randomNum()\n\n      }),this.updateDoneStatus  );\n  }\n  render(){\n    const { selectedNumbers, randomNoOfStars,\n       isCorrectAnswer,usedNumbers,redraws, doneStatus } = this.state;\n    return (\n        <div className = \"container\">\n            <h3>Play Nine</h3>\n            <hr/>\n            <div className = \"row\">\n              <Stars  starsCount ={randomNoOfStars}/>\n              <Buttons selectedNumbers = {selectedNumbers }\n                checkAnswer = {this.checkAnswer}\n                isCorrectAnswer = {isCorrectAnswer}\n                updateUsedNumbers = {this.updateUsedNumbers }\n                redraw = {this.redraw}\n                redrawCount = {redraws}\n              />\n              <Answer selectedNumbers = {selectedNumbers}  handleUnselect={this.unSelect}/>\n            </div>\n            <hr/>\n            {doneStatus ?\n              <Done doneStatus = {doneStatus } resetHandler ={this.resetHandler}/>  :\n              <Numbers selectedNumbers = {selectedNumbers} clickHandler={this.handleClick}\n                usedNumbers = {usedNumbers} />\n            }\n\n\n        </div>\n\n    );\n  }\n}\nGame.list = [1,2,3,4,5,6,7,8,9];\nclass App extends Component {\n  render() {\n    return (\n      <div>\n          <Game/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}